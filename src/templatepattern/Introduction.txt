模板模式Template Pattern
1.定义：
	定义一个操作中的算法的骨架，将一些特定步骤延迟到子类实现。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
	这里的算法的结构，可以理解为你根据需求设计出来的业务流程。特定的步骤就是指那些可能在内容上存在变数的环节。
2.使用情况：
	1) 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。
	2) 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。其实这可以说是一种好的编码习惯了。
	3) 控制子类扩展。
3.方法：
	模板方法中的方法可以分为两大类：基本方法和模板方法。
	
	基本方法：代表具体逻辑步骤的方法称做基本方法(primitive method)；
	基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。
		●　　抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象方法以abstract关键字标示。
		●　　具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。
		●　　钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现

	模板方法：将这些基本方法汇总起来的方法叫做模板方法(template method)
	一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
	一个抽象类可以有任意多个模板方法，而不限于一个。
	每一个模板方法都可以调用任意多个具体方法。
4.关键
	模板模式的关键是：子类可以置换掉父类的可变部分，但是子类却不可以改变模板方法所代表的顶级逻辑。
	每当定义一个新的子类时，不要按照控制流程的思路去想，而应当按照“责任”的思路去想。
	
	换言之，应当考虑哪些操作是必须置换掉的，哪些操作是可以置换掉的，以及哪些操作是不可以置换掉的。
	
	使用模板模式可以使这些责任变得清晰。
　　