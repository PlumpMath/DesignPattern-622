1.定义：
	将对象以树形结构组织起来，以达成“部分－整体”的层次结构，使得客户端对单个对象和组合对象的使用具有一致性

2.分类：
	合成模式的实现根据所实现接口的区别分为两种形式，分别称为安全式和透明式。
	1.安全模式的合成模式：要求管理聚集的方法只出现在树枝构件类中，而不出现在树叶构件类中。
	2.透明式合成模式的结构：与安全式的合成模式不同的是，透明式的合成模式要求所有的具体构件类，不论树枝构件还是树叶构件，均符合一个固定接口

3.两种实现方法的选择
　　这里所说的安全性合成模式是指：
		抽象构件只定义共同的接口，从客户端使用合成模式上看是否更安全，如果是安全的，那么就不会有发生误操作的可能，能访问的方法都是被支持的。
　　这里所说的透明性合成模式是指：
		抽象构件定义所有的接口，从客户端使用合成模式上，是否需要区分到底是“树枝对象”还是“树叶对象”。
		如果是透明的，那就不用区分，对于客户而言，都是Compoent对象，具体的类型对于客户端而言是透明的，是无须关心的。
	对于合成模式而言，在安全性和透明性上，会更看重透明性，毕竟合成模式的目的是：让客户端不再区分操作的是树枝对象还是树叶对象，而是以一个统一的方式来操作。
　　
	而且对于安全性的实现，需要区分是树枝对象还是树叶对象。有时候，需要将对象进行类型转换，却发现类型信息丢失了，只好强行转换，这种类型转换必然是不够安全的。
	
	因此在使用合成模式的时候，建议多采用透明性的实现方式