1.定义：
	原型模式属于对象的创建模式。通过给出一个原型对象来指明所有创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象。

2.原型模式的结构：
	原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。
	这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，只要实现了克隆自身的方法，
	就可以通过这个方法来获取新的对象，而无须再去通过new来创建。

3.原型模式有两种表现形式：
	（1）简单形式
	（2）登记形式
	这两种表现形式仅仅是原型模式的不同实现。
4.两种形式的比较
	简单形式和登记形式的原型模式各有其长处和短处。
	1.如果需要创建的原型对象数目较少而且比较固定的话，可以采取第一种形式。在这种情况下，原型对象的引用可以由客户端自己保存。
	2.如果要创建的原型对象数目不固定的话，可以采取第二种形式。在这种情况下，客户端不保存对原型对象的引用，这个任务被交给管理员对象。
	在复制一个原型对象之前，客户端可以查看管理员对象是否已经有一个满足要求的原型对象。
	如果有，可以直接从管理员类取得这个对象引用；如果没有，客户端就需要自行复制此原型对象。
5.原型模式的优点
	原型模式允许在运行时动态改变具体的实现类型。原型模式可以在运行期间，由客户来注册符合原型接口的实现类型，也可以动态地改变具体的实现类型，
	看起来接口没有任何变化，但其实运行的已经是另外一个类实例了。因为克隆一个原型就类似于实例化一个类。

6.原型模式的缺点
	原型模式最主要的缺点是每一个类都必须配备一个克隆方法。配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类来说不是很难，
	而对于已经有的类不一定很容易，特别是当一个类引用不支持序列化的间接对象，或者引用含有循环结构的时候。